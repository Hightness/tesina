3 Integer Linear Programming Formulation
We present an integer linear programming (ILP) formulation of MLCM-TC.
ILP formulations have already been introduced for the general MLCM problem [16,18] as well as for MLCM-TC, when restricted to the special case of two
layers only [4]. Both models use quadratic ordering formulations. In this section,
we will extend these formulations to an ILP model for MLCM-TC.
To this end, let G = (V, E, T ) be an instance of MLCM-TC, as described
in Sect. 2. For every layer r ∈ {1, 2, . . . , p}, let V
(2)
r = {(i, j) ∈ Vr × Vr : i < j}
be the set of all the ordered pairs of nodes on the considered layer with the
first index smaller than the second. As the total number of edge crossings is
the sum of all crossings in adjacent layers r and r + 1, summed up for all
r ∈ {1, 2, . . . , p − 1}, let us consider the problem for a pair of adjacent layers
r and r + 1, with r ∈ {1, 2, . . . , p − 1}.
A permutation of the nodes in Vr is characterized by variables x
r
ij ∈ {0, 1}
associated with the pairs (i, j) ∈ V
(2)
r as follows:
x
r
ij = 1 if and only if i is placed above j on layer r.
Then a pair of edges (i, k),(j, `) ∈ Er crosses if and only if
i is placed above j on layer r and ` is placed above k on layer r + 1
or
j is placed above i on layer r and k is placed above ` on layer r + 1,
see Fig. 3.
5
i
j
k
`
r r + 1
i
j k
`
r r + 1
i
j k
`
r r + 1
i
j
k
`
r r + 1
Fig. 3. An edge pair crosses in two of four cases.
Therefore, if {x
r
ij | (i, j) ∈ V
(2)
r } and {x
r+1
k` | (k, `) ∈ V
(2)
r+1} describe node
permutations on layers r and r + 1, respectively, we have
cijk` := x
r
ij (1 − x
r+1
k` ) + (1 − x
r
ij )x
r+1
k` ∈ {0, 1}
and cijk` = 1 if and only if the edges (i, k) and (j, `) cross.
It is well known (see, e.g., [14]) that {x
r
ij ∈ {0, 1} | (i, j) ∈ V
(2)
r } characterizes
a node permutation on Vr if and only if the transitivity conditions
0 ≤ x
r
hi + x
r
ij − x
r
hj ≤ 1 (h < i < j)
are satisfied for all r ∈ {1, 2, . . . , p}.
It remains to model the tree conditions implied by the elements of T . Given a
layer r ∈ {1, 2, . . . , p} and two nodes i and j in Vr, we denote by P(i, j) the lowest
common ancestor of i and j in Tr. Let V
(3)
r = {(h, i, j) ∈ Vr×Vr×Vr : h < i < j}.
For every r ∈ {1, 2, . . . , p} and every triple (h, i, j) ∈ V
(3)
r , we impose the tree
constraints
x
r
hj = x
r
ij if P(h, i) 6= P(P(h, i), j),
x
r
hi = x
r
hj if P(i, j) 6= P(h, P(i, j)).
The first equation forbids the placement of j between h and i in case j does not
belong to the smallest subtree containing h and i. Similarly, the second equation
forbids the placement of h between i and j in case h is not contained in the
smallest subtree of i and j.
Putting it all together, we obtain the following model for MLCM-TC based
on a combination of [18] for MLCM and [4] for the special case of MLCM-TC
for two layers:
minimize Xp−1
r=1
X
(i,j)∈V
(2)
r
, (k,`)∈V
(2)
r+1
(i,k),(j,`)∈Er
x
r
ij (1 − x
r+1
k` ) + (1 − x
r
ij )x
r+1
k`
6
subject to
0 ≤ x
r
hi + x
r
ij − x
r
hj ≤ 1 for all r ∈ {1, 2, . . . , p} and (h, i, j) ∈ V
(3)
r
x
r
hj = x
r
ij for all r ∈ {1, 2, . . . , p} and (h, i, j) ∈ V
(3)
r
if P(h, i) 6= P(P(h, i), j)
x
r
hi = x
r
hj for all r ∈ {1, 2, . . . , p} and (h, i, j) ∈ V
(3)
r
if P(i, j) 6= P(h, P(i, j))
x
r
ij ∈ {0, 1} for all r ∈ {1, 2, . . . , p} and (i, j) ∈ V
(2)
r .
This is a quadratic 0-1-programming problem with linear constraints, namely,
the transitivity conditions and the tree conditions. (Without the tree conditions,
the problem is also called a quadratic linear ordering problem.)
When we temporarily ignore the transitivity conditions and the tree conditions, the remaining problem is known as quadratic 0-1-optimization of the
form
minimize z
T Qz + q
T
z
s.t. z ∈ {0, 1}
N
for an upper triangular matrix Q ∈ Z
N×N and a vector q ∈ Z
N . A well known
construction of Hammer [15], see also [2,10,23], results in an equivalent formulation as a maximum cut problem on a graph Gmc = (Vmc, Emc) with N +1 nodes,
all but one are identified with the zi
, i ∈ {1, 2, . . . , N}. Let us call the additional
node z0, so Vmc = {z0, z1, . . . , zN }. The undirected edges (zi
, zj ), 1 ≤ i < j ≤ N,
correspond to the nonzero entries of the matrix Q, and there are additional N
edges (z0, zi) for 1 ≤ i ≤ N, giving the edge set Emc. The edge weights we = wij ,
0 ≤ i < j ≤ N, are easily computed from Q and q. For W ⊆ Vmc the edge set
δ(W) = {(i, j) ∈ Emc | i ∈ W, j ∈ Vmc \ W} is called a cut in Gmc. Then the
resulting maximum cut problem has the form
max{w(δ(W)) | W ⊆ Vmc}.
By introducing variables ye ∈ {0, 1} for each e ∈ Emc, the maximum cut
problem can be formulated as
maximize X
e∈Emc
weye
subject to
P
e∈F
ye −
P
e∈C\F
ye ≤ |F| − 1 for all cycles C ⊆ Emc and all F ⊆ C, |F| odd
ye ∈ {0, 1} for all e ∈ Emc ,
see [3]. The constraints are called odd cycle constraints.
Applying this transformation is the key to our algorithm: The edges e ∈ Emc
not incident to z0 correspond to edge pairs (i, k),(j, `) ∈ Er, r ∈ {1, 2, . . . , p − 1}.
The edges e ∈ Emc that are incident to z0 correspond to our variables x
r
ij
for r ∈ {1, 2, . . . , p}, i < j. In view of the latter property, we can formulate
MLCM-TC as a maximum cut problem with the additional transitivity and tree
constraints, and we can solve it using a branch and cut approach for the maximum cut problem like in [2] that additionally enforces these extra constraints.